using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Interfaces
{
    //for your custom types to work with the C# foreach keyword, the container must define a method named GetEnumerator(), which
    //has been formalized by the IEnumerable interface type
    //container/collection: iterate over EnumerableType collection using foreach
    //so it has to implement IEnumerable interface
    class EnumerableType : IEnumerable
    {
        public Product[] arrProd = new Product[] 
        {
            new Product(001, "mouse", 19.45),
            new Product(002, "notebook", 3.67),
            new Product(003, "pencils", 1.25)
        };

        //private: Iterator
        //When the C# compiler encounters an iterator method, it dynamically generates a nested class definition
        //within the scope of the defining type. The autogenerated nested class implements
        //the GetEnumerator(), MoveNext(), and Current members on your behalf.
        IEnumerator IEnumerable.GetEnumerator()
        {
            //every collection implements IEnumerable and GetEnumerator()
            //Returns an enumerator that iterates through a collection.
            //option 1
            return arrProd.GetEnumerator();
            //foreach (Product item in arrProd)
            //{
                //yield keyword is used to specify the value (or values) to be returned to the caller’s foreach construct
                //yield return statement is reached, the current location in the container is stored, and execution is restarted from this
                //location the next time the iterator is called
                //option 2
                //yield return item;
                ////option 3
                //yield return arrProd[0];
                //yield return arrProd[1];
                //yield return arrProd[2];
            //}
        }

        //return type is IEnumerable not IEnumerator
        public IEnumerable WorkingWithNamedIterators()
        {
            foreach (Product item in arrProd)
            {
                yield return item;
            }
        }
    }
}
